clear all
clc
close all


Ntrials = 10;
snrvec = 20:-0.5:0;
mod_order = ["QPSK"];
pilotsvec = [50,20,50];
for pilotsidx = 1:length(pilotsvec)
    k = 2;
    Npilots = pilotsvec(pilotsidx);
    ber =  zeros(size(snrvec));
    for snridx=1:length(snrvec)
        tic
        snr = snrvec(snridx);
        ber_snr = 0;
        for trials=1:Ntrials
            Nt = 2;
            Nr = 2;

            H = randn(Nr,Nt)+1j*randn(Nr,Nt);
            H = H./sqrt(2);


            %generate N data bits
            Nbits = 100*Nt*k;
            data_bits = floor(2*rand(Nbits,1));

            H_est = zeros(size(H));
            for idx=1:Nt*k:Npilots*Nt*k-Nt*k
                bits = data_bits(idx:idx+Nt*k-1);
                temp = reshape(bits,[k,Nt]);
                sym_dec = bit2int(temp,k)';
                                    sym = qammod(sym_dec,2^k,'UnitAveragePower',true);
                    rx = add_noise(H*sym,snr,k);
                for ntidx=1:Nt

                    mask = zeros(Nt,1);
                    mask(ntidx) = 1;
                    H_est = H_est + 1/(Npilots) * (rx*(sym.*mask)');
                end
            end
                         H_est
                         H

            for idx=Npilots*Nt*k+1:Nt*k:Nbits-Nt*k
                bits = data_bits(idx:idx+Nt*k-1);
                temp = reshape(bits,[k,Nt]);
                sym_dec = bit2int(temp,k)';
                sym = qammod(sym_dec,2^k,'UnitAveragePower',true);
                rx = add_noise(H*sym,snr,k);
                %                             rx = H*sym;

                %ZF
                s_est = zeros(1,Nt);
                sym_to_tx_ant_LUT = 1:Nt;
                decoding_order = zeros(1,Nt);
                ctr = 1;
                temp_H = H_est;
                %magic sauce section
                while (ctr<=Nt)
                    %find row with min noise amplification
                    %                     T = get_ZF_T(H);
                    T = get_MMSE_T(temp_H,Nt,snr,k);
                    norm2 = abs(T).^2;
                    norm2 = sum(norm2,2);
                    [minv,minidx] = min(norm2);
                    z = T(minidx,:)*rx;
                    s_hat_dec = qamdemod(z,2^k,'UnitAveragePower',true);
                    s_hat = qammod(s_hat_dec,2^k,'UnitAveragePower',true);
                    decoding_order(ctr) = sym_to_tx_ant_LUT(minidx);
                    %                     sym_to_tx_ant_LUT
                    sym_to_tx_ant_LUT(minidx) = [];
                    rx = rx - s_hat*temp_H(:,minidx);
                    temp_H(:,minidx) = [];%zeros(Nr,1);
                    s_est(ctr) = s_hat_dec;
                    ctr = ctr + 1;
                end
                %             sort(s_est)
                %             sort(sym_dec')
                ber_snr = ber_snr +  1/Ntrials*(1 - 1/(k*Nt)*sum(sum(int2bit(s_est,k)==int2bit(sym_dec(decoding_order)',k))));
                %                 s_est
                %                 sym_dec'
                %                 ber_snr = ber_snr +  1/Ntrials*(1 - 1/(k*Nt)*sum(sum(int2bit(sort(s_est),k)==int2bit(sort(sym_dec)',k))));
                %                             s_est
                %                             sym_dec(decoding_order)'
                %             decoding_order


            end
            ber(snridx) = ber_snr/(Nbits-Npilots);
        end
        toc
    end
    legend_str = "2x2 QPSK "+"pilots:"+string(Npilots);
    semilogy(snrvec,ber,"DisplayName",legend_str);
    hold on
end

ylim([1e-5,1])
grid on
legend
xlabel("E_b/N_0")
ylabel("BER")